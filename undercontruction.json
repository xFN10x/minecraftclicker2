{"turbo":false,"interpolation":true,"framerate":60,"highQualityPen":true,"maxClones":9999999999,"fencing":false,"miscLimits":false,"dangerousOptimizations":false,"stageWidth":480,"stageHeight":360,"resizeMode":"dynamic-resize","autoplay":true,"username":"player####","closeWhenStopped":true,"projectId":"p4-@undercontruction.pmp","custom":{"css":"","js":""},"appearance":{"background":"#000000","foreground":"#ffffff","accent":"#00c3ff"},"loadingScreen":{"progressBar":false,"text":"","imageMode":"normal","image":null},"controls":{"greenFlag":{"enabled":false},"stopAll":{"enabled":false},"fullscreen":{"enabled":false},"pause":{"enabled":false}},"monitors":{"editableLists":false,"variableColor":"#ff8c1a","listColor":"#fc662c"},"penguinmod":{"permissionManager":{"enabled":false,"unsandboxedJavascript":false}},"compiler":{"enabled":true,"warpTimer":false},"packagedRuntime":true,"target":"html","app":{"icon":null,"packageName":"undercontruction","windowTitle":"Under Contruction!","windowMode":"window","version":"1.0.0"},"chunks":{"gamepad":false,"pointerlock":false},"cloudVariables":{"mode":"ws","cloudHost":"wss://clouddata.turbowarp.org","custom":{},"specialCloudBehaviors":false,"unsafeCloudBehaviors":false},"cursor":{"type":"auto","custom":null,"center":{"x":0,"y":0}},"extensions":["data:application/javascript,class%20SPtest2%7BgetInfo()%7Breturn%7Bid%3A%22SPtest%22%2Cname%3A%22Obj%20Filt%22%2Cblocks%3A%5B%7Bopcode%3A%22filterJson%22%2Ctext%3A%22filter%20JSON%20%5BOBJ%5D%20with%20string%20%5BSTR%5D%22%2CblockType%3AScratch.BlockType.REPORTER%2Carguments%3A%7BOBJ%3A%7Btype%3AScratch.ArgumentType.STRING%7D%2CSTR%3A%7Btype%3AScratch.ArgumentType.STRING%7D%7D%7D%2C%7Bopcode%3A%22orderJson%22%2Ctext%3A%22order%20JSON%20%5BOBJ%5D%20with%20string%20%5BSTR%5D%22%2CblockType%3AScratch.BlockType.REPORTER%2Carguments%3A%7BOBJ%3A%7Btype%3AScratch.ArgumentType.STRING%7D%2CSTR%3A%7Btype%3AScratch.ArgumentType.STRING%7D%7D%7D%2C%7Bopcode%3A%22typeString%22%2Ctext%3A%22%5BSTRING1%5D%20%7C%7C%20%5BSTRING2%5D%22%2CblockType%3AScratch.BlockType.REPORTER%2Carguments%3A%7BSTRING1%3A%7Btype%3AScratch.ArgumentType.STRING%7D%2CSTRING2%3A%7Btype%3AScratch.ArgumentType.STRING%7D%7D%7D%2C%7Bopcode%3A%22exportME%22%2Ctext%3A%22my%20skin%20data%22%2CblockType%3AScratch.BlockType.REPORTER%7D%2C%7Bopcode%3A%22prompt%22%2Ctext%3A%22prompt%20%5BSTR%5D%22%2CblockType%3AScratch.BlockType.REPORTER%2Carguments%3A%7BSTR%3A%7Btype%3AScratch.ArgumentType.STRING%7D%7D%7D%2C%7Bopcode%3A%22goToLink%22%2CblockType%3AScratch.BlockType.COMMAND%2Ctext%3A%22open%20link%20%5BINPUT%5D%22%2Carguments%3A%7BINPUT%3A%7Btype%3AScratch.ArgumentType.STRING%7D%7D%7D%2C%7Bopcode%3A%22redirectToLink%22%2CblockType%3AScratch.BlockType.COMMAND%2Ctext%3A%22redirect%20to%20%5BINPUT%5D%22%2Carguments%3A%7BINPUT%3A%7Btype%3AScratch.ArgumentType.STRING%7D%7D%7D%2C%7Bopcode%3A%22setQual%22%2CblockType%3AScratch.BlockType.COMMAND%2Ctext%3A%22set%20qual%20to%20%5BVAL%5D%22%2Carguments%3A%7BVAL%3A%7Btype%3AScratch.ArgumentType.NUMBER%7D%7D%7D%2C%5D%7D%7DfilterJson(e)%7Breturn%20JSON.stringify(function%20t(r)%7Bif(%22object%22%3D%3Dtypeof%20r%26%26null!%3D%3Dr)%7Blet%20n%3D%7B%7D%3Bfor(let%5Bo%2Ca%5Dof%20Object.entries(r))if(String(o).toLowerCase().includes(e.STR.toLowerCase())%7C%7C%22string%22%3D%3Dtypeof%20a%26%26a.toLowerCase().includes(e.STR.toLowerCase()))n%5Bo%5D%3Da%3Belse%20if(%22object%22%3D%3Dtypeof%20a)%7Blet%20i%3Dt(a)%3BObject.keys(i).length%3E0%26%26(n%5Bo%5D%3D%7B...a%2C...i%7D)%7Dreturn%20n%7Dreturn%20Array.isArray(r)%3Fr.map(e%3D%3Et(e)).filter(e%3D%3E%22object%22%3D%3Dtypeof%20e%26%26Object.keys(e).length%3E0)%3Ar%7D(JSON.parse(e.OBJ)%7C%7C%7B%7D)%2Cnull%2C2)%7DorderJson(e)%7Blet%7Bmatching%3At%2CnonMatching%3Ar%7D%3Dfunction%20t(r)%7Blet%20n%3D%7B%7D%2Co%3D%7B%7D%3Bif(%22object%22%3D%3Dtypeof%20r%26%26null!%3D%3Dr)for(let%5Ba%2Ci%5Dof%20Object.entries(r))if(String(a).toLowerCase().includes(e.STR.toLowerCase())%7C%7C%22string%22%3D%3Dtypeof%20i%26%26i.toLowerCase().includes(e.STR.toLowerCase()))n%5Ba%5D%3Di%3Belse%20if(%22object%22%3D%3Dtypeof%20i)%7Blet%7Bmatching%3Al%2CnonMatching%3Ap%7D%3Dt(i)%3BObject.keys(l).length%3E0%26%26(n%5Ba%5D%3D%7B...i%2C...l%7D)%2CObject.keys(p).length%3E0%26%26(o%5Ba%5D%3D%7B...i%2C...p%7D)%7Delse%20o%5Ba%5D%3Di%3Belse%20Array.isArray(r)%3Fr.forEach((e%2Cr)%3D%3E%7Blet%7Bmatching%3Aa%2CnonMatching%3Ai%7D%3Dt(e)%3BObject.keys(a).length%3E0%26%26(n%5Br%5D%3D%7B...e%2C...a%7D)%2CObject.keys(i).length%3E0%26%26(o%5Br%5D%3D%7B...e%2C...i%7D)%7D)%3Ao.value%3Dr%3Breturn%7Bmatching%3An%2CnonMatching%3Ao%7D%7D(JSON.parse(e.OBJ)%7C%7C%7B%7D)%3Breturn%20JSON.stringify(%7B...t%2C...r%7D%2Cnull%2C2)%7DgoToLink(e)%7BScratch.openWindow(e.INPUT)%7DredirectToLink(e)%7BScratch.redirect(e.INPUT)%7Dprompt(e)%7Breturn%20window.prompt(e.STR)%7DtypeString(e)%7Breturn%20e.STRING1%7C%7Ce.STRING2%7DexportME(e%2Ct)%7Bif(-1%3D%3D%3Dvm.renderer._drawList.indexOf(t.target.drawableID))return%22%22%3Blet%20r%3Dvm.runtime.renderer.extractDrawableScreenSpace(t.target.drawableID).imageData%3Bvar%20n%3Ddocument.createElement(%22canvas%22)%3Breturn%20n.width%3Dr.width%2Cn.height%3Dr.height%2Cn.getContext(%222d%22).putImageData(r%2C0%2C0)%2Cthis.stretch(n.toDataURL(%22image%2Fpng%22)%2C1.61*r.width%2C1.61*r.height)%7Dstretch(e%2Ct%2Cr)%7Breturn%20new%20Promise(n%3D%3E%7Blet%20o%3Dnew%20Image%3Bo.onload%3D()%3D%3E%7Bn(this.exportImg(o%2Cthis.printImg(o%2Ct%2Cr)%2Ct%2Cr))%7D%2Co.src%3De%7D)%7DprintImg(e%2Ct%2Cr)%7Blet%20n%3Ddocument.createElement(%22canvas%22)%3Bn.width%3Dt%7C%7Ce.width%2Cn.height%3Dr%7C%7Ce.height%3Blet%20o%3Dn.getContext(%222d%22)%3Breturn%20o.drawImage(e%2C0%2C0%2Cn.width%2Cn.height)%2Co.getImageData(0%2C0%2Cn.width%2Cn.height).data%7DexportImg(e%2Ct%2Cr%2Cn)%7Blet%20o%3Ddocument.createElement(%22canvas%22)%3Breturn%20o.width%3Dr%7C%7Ce.width%2Co.height%3Dn%7C%7Ce.height%2Co.getContext(%222d%22).putImageData(new%20ImageData(new%20Uint8ClampedArray(t)%2Co.width%2Co.height)%2C0%2C0)%2Co.toDataURL()%7DsetQual(e%2Ct)%7Blet%20r%3Dvm.renderer._allDrawables%5Bt.target.drawableID%5D%3Br.setHighQuality(!0)%2Cr.skin._maxTextureScale%3DScratch.Cast.toNumber(e.VAL)%2Cr.skin.emitWasAltered()%7D%7DScratch.extensions.register(new%20SPtest2)%3B","data:application/javascript,!function(t)%7B%22use%20strict%22%3Blet%20e%3Dt.ArgumentType%2Ci%3Dt.BlockType%2Cr%3Dt.Cast%3Bt.extensions.register(new%20class%20t%7Bconstructor()%7Bthis.failed%3D!1%2Cthis.error%3D%22%22%2Cthis.waiting%3D!1%2Cthis.origin%3D%22%22%2Cwindow.addEventListener(%22message%22%2Ct%3D%3E%7Bthis.handleWindowMessage(t)%7D)%2Cthis._possibleErrors%3D%7BnoParents%3A%22No%20parent%20window%22%2CtimedOut%3A%22Timed%20out%22%2CnotTrusted%3A%22Your%20website%20is%20not%20trusted%22%2CcouldntLoad%3A%22Extension%20failed%20to%20load%5Cn%22%2CnoExt%3A%22No%20extension%20URL%20was%20provided%22%2CnotString%3A%22Extension%20URL%20was%20not%20a%20string%22%7D%7DgetInfo()%7Breturn%7Bid%3A%22jgExtGalleryLoader%22%2Cname%3A%22Gallery%20Extension%20Loader%22%2Cblocks%3A%5B%7BblockType%3Ai.LABEL%2Ctext%3A%22Editor%20Origin%20must%20be%20set%20before%20use.%22%7D%2C%7BblockType%3Ai.LABEL%2Ctext%3A'Editor%20Origin%20will%20be%20the%20%22window.origin%22'%7D%2C%7BblockType%3Ai.LABEL%2Ctext%3A%22of%20the%20editor%20window.%22%7D%2C%7Bopcode%3A%22setExpectingURL%22%2CblockType%3Ai.COMMAND%2Ctext%3A%22set%20editor%20origin%20to%20%5BURL%5D%22%2Carguments%3A%7BURL%3A%7Btype%3Ae.STRING%2CdefaultValue%3A%22https%3A%2F%2Fstudio.penguinmod.com%22%7D%7D%7D%2C%7Bopcode%3A%22loadFromURL%22%2CblockType%3Ai.COMMAND%2Ctext%3A%22request%20to%20load%20extension%20url%20%5BURL%5D%22%2Carguments%3A%7BURL%3A%7Btype%3Ae.STRING%2CdefaultValue%3A%22https%3A%2F%2Fextensions.turbowarp.org%2Fstretch.js%22%7D%7D%7D%2C%22---%22%2C%7Bopcode%3A%22getwaiting%22%2CblockType%3Ai.BOOLEAN%2Ctext%3A%22waiting%3F%22%7D%2C%7Bopcode%3A%22getfailed%22%2CblockType%3Ai.BOOLEAN%2Ctext%3A%22failed%3F%22%7D%2C%7Bopcode%3A%22geterror%22%2CblockType%3Ai.REPORTER%2Ctext%3A%22error%22%7D%2C%5D%7D%7DhandleWindowMessage(t)%7Bif(!t.origin.startsWith(this.origin)%7C%7C!t.data%7C%7C!t.data.p4)return%3Blet%20e%3Dt.data.p4%3Bif(e.type)%7Bif(this.waiting%3D!1%2C%22success%22%3D%3D%3De.type)%7Bconsole.log(%22Loading%20extension%20was%20a%20success%22)%2Cthis.failed%3D!1%2Cthis.error%3D%22%22%3Breturn%7Dswitch(console.log(%22Loading%20extension%20failed%22)%2Cthis.failed%3D!0%2Ce.error)%7Bcase%22not_trusted%22%3Athis.error%3Dthis._possibleErrors.notTrusted%3Bbreak%3Bcase%22no_loadExt%22%3Athis.error%3Dthis._possibleErrors.noExt%3Bbreak%3Bcase%22not_string%22%3Athis.error%3Dthis._possibleErrors.notString%3Bbreak%3Bcase%22couldnt_load%22%3Athis.error%3Dthis._possibleErrors.couldntLoad%2Be.pmerror%3Bbreak%3Bdefault%3Athis.error%3De.error%7D%7D%7DsetExpectingURL(t)%7Bthis.origin%3Dr.toString(t.URL)%7DloadFromURL(t)%7Bif(%22O%25Lu4%3Auu%5DX%23B%7D%7Bq8PWYW%22!%3D%3Dvm.runtime.targets%5B0%5D.id%7C%7Cthis.waiting)return%3Bthis.waiting%3D!1%3Blet%20e%3Dr.toString(t.URL)%2Ci%3Dwindow.opener%7C%7Cwindow.parent%3Bif(!i)%7Bthis.failed%3D!0%2Cthis.error%3Dthis._possibleErrors.noParents%3Breturn%7Dthis.waiting%3D!0%2CsetTimeout(()%3D%3E%7Bthis.waiting%26%26(this.waiting%3D!1%2Cthis.failed%3D!0%2Cthis.error%3Dthis._possibleErrors.timedOut)%7D%2C2500)%2Ci.postMessage(%7BloadExt%3Ae%7D%2Cthis.origin)%7Dgetwaiting()%7Breturn%20this.waiting%7Dgetfailed()%7Breturn%20this.failed%7Dgeterror()%7Breturn%20this.error%7D%7D)%7D(Scratch)%3B","data:text/javascript;base64,","https://extensions.turbowarp.org/text.js","https://extensions.turbowarp.org/stretch.js","https://extensions.turbowarp.org/godslayerakp/http.js","https://extensions.turbowarp.org/files.js","https://extensions.turbowarp.org/Lily/ClonesPlus.js","https://extensions.turbowarp.org/Lily/lmsutils.js","https://extensions.turbowarp.org/Lily/Skins.js","https://extensions.turbowarp.org/navigator.js","https://extensions.turbowarp.org/Lily/Video.js","https://extensions.turbowarp.org/Lily/CommentBlocks.js","https://extensions.turbowarp.org/Lily/TempVariables2.js","https://extensions.turbowarp.org/fetch.js","https://extensions.turbowarp.org/sound.js","https://extensions.turbowarp.org/numerical-encoding-2.js","https://extensions.turbowarp.org/DNin/wake-lock.js","https://extensions.turbowarp.org/CST1229/zip.js","https://extensions.turbowarp.org/true-fantom/network.js","https://extensions.penguinmod.com/extensions/jwklong/mathematics.js","https://extensions.turbowarp.org/Lily/LooksPlus.js","https://extensions.turbowarp.org/ZXMushroom63/searchApi.js","https://extensions.turbowarp.org/Lily/MoreEvents.js","https://extensions.turbowarp.org/Skyhigh173/json.js","https://sharkpools-extensions.vercel.app/extension-code/Extra-Controls.js","https://sharkpools-extensions.vercel.app/extension-code/Files-Expanded.js","https://extensions.turbowarp.org/-SIPC-/time.js","https://extensions.turbowarp.org/local-storage.js","https://extensions.turbowarp.org/XeroName/Deltatime.js","https://extensions.turbowarp.org/cursor.js","https://extensions.turbowarp.org/DT/cameracontrols.js","https://extensions.penguinmod.com/extensions/skyhigh173/object.js","https://sharkpools-extensions.vercel.app/extension-code/My-Blocks-Plus.js","https://sharkpools-extensions.vercel.app/extension-code/Variables-Expanded.js","https://sharkpools-extensions.vercel.app/extension-code/Fetch-Progress.js","https://sharkpools-extensions.vercel.app/extension-code/Better-Input.js","https://sharkpools-extensions.vercel.app/extension-code/Hyper-Sense.js","https://sharkpools-extensions.vercel.app/extension-code/Particle-Engine.js","https://sharkpools-extensions.vercel.app/extension-code/Time-Calculation.js","https://extensions.penguinmod.com/extensions/Lily/AllMenus.js","https://extensions.penguinmod.com/extensions/SharkPool/Sprite-Effects.js","https://sharkpools-extensions.vercel.app/extension-code/Layer-Control.js"],"bakeExtensions":true,"maxTextureDimension":2048}